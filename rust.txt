- so pode ter uma referencia
    - impossivel ciclos
        - impossivel lista duplamente encadeada
- nos de arvores nao podem ter owners diferentes

Rust = Ceu
  &x = x
   x = drop(x)


- descobri as diferencas
    1. ce nao tem foco em mut: concorrencia/write-while-reading/iterator
        - problema ortogonal
    2. ADTs em rust sao ruins
    3. Rust nao consegue mover partes de estruturas recursivas
        - var z: (Nat,Nat) = ...
        - var x: Nat = z.1          -- z.1=$
        - isso por conta do set auto nil
    x. keyword move
    4. Ce terá pools (pool xs[]:Nat ; var x:Nat in xs = ...)
        4.1 Limita escopo da memória
            - o sistema de ownership não respeita escopo mínimo, sempre posso retornar.
            - confusão com entendimento da memória em determinado momento
            - ter um ponteiro único nao ajuda necessariamente a entender
        4.2 Permite bounded pool
    X. Conseguiria guardar ponteiros na raiz da struct que quando houver qq free,
       eu percorro a raiz e elimino o ptr
    5. Growable. Só posso escrever em subarvores vazias, nunca substituir um no e remover
       a sua subarvore. Isso iria delasalocar nós com ponteiros pendentes.
       A verificação é em runtime, feito na atribuicao. Só pode ser assim pois
       ponteiros que já foram extremidades deixam de ser assim que há uma attr
        - agora vou poder ter ponteiros guardados na propria árvore ou até mesmo
          fora em escopos menores ou iguais
    - tipos de recs:
        - immutable
            - nao precisa de clone (pode share os nós sem move)
        - mutable
            - growable
                - pode guardar ponteiros
            - movable
                - pode mover sub arvores
                  (transfer ownership of subtree)
    - empty value:
        - movable: o teste do grow é deito em cima do valor empty
        - mutable: o valor original após o move vira o empty

https://radekvit.medium.com/move-semantics-in-c-and-rust-the-case-for-destructive-moves-d816891c354b

The reason why bit copies are always enough for a move operation in Rust is that Rust does not support self-referential structs in its safe subset. The borrowing rules in Rust make it impossible for a struct to borrow from its own fields (unless you reach for raw pointers and unsafe). Such structs would require their move operations to adjust these references after moving the resources from the original object, but without them, there is no real need to execute arbitrary code on moves.
